// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using TaxCalculator.UI.Desktop.Extensions;
using TaxCalculator.UI.MVVM;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace TaxCalculator.UI.Desktop.Controls.DataGrid
{
    public sealed partial class AutoGeneratedDataGrid : UserControl
    {
        public ICollection Items
        {
            get => (ICollection)GetValue(ItemsDependencyProperty);
            set => SetValue(ItemsDependencyProperty, value);
        }

        public static DependencyProperty ItemsDependencyProperty = DependencyProperty.Register(nameof(Items),
            typeof(ICollection),
            typeof(AutoGeneratedDataGrid),
            new PropertyMetadata(null));

        private readonly IColumnFactory _columnFactory;

        public AutoGeneratedDataGrid()
        {
            this.InitializeComponent();

            _columnFactory = App.Current.GetService<IColumnFactory>();
        }

        private void FrameworkElement_OnLoaded(object sender, RoutedEventArgs e)
        {
            if (Items != null && Items.Count > 0)
            {
                var type = Items.GetType();

                if (type.IsGenericType)
                {
                    var genericArgument = type.GetGenericArguments().First();
                    if (genericArgument == typeof(ModelContainer))
                    {
                        var firstItem = Items.Cast<object>().First();
                        var result = genericArgument.GetProperty(nameof(ModelContainer.Type))?.GetValue(firstItem);

                        if (result is Type modelType)
                        {
                            GenerateColumns(modelType);
                        }
                        else
                        {
                            throw new Exception("Something went wrong during fetching model container type");
                        }
                    }
                    else
                    {
                        GenerateColumns(genericArgument);
                    }
                }
                else
                {
                    throw new Exception("Items should be generic collection");
                }
            }
        }

        private void GenerateColumns(Type modelType)
        {
            var modelProperties = modelType.GetProperties()
                .Where(x => x.GetCustomAttribute<GeneratedColumnAttribute>() != null)
                .ToList();

            foreach (var property in modelProperties)
            {
                var column = _columnFactory.CreateColumn(property);
                DataGrid.Columns.Add(column);
            }
        }
    }
}
