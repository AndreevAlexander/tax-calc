@page "/manage-incomes/{ProfileId}/edit/{IncomeId}"

@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.Incomes.Commands
@using TaxCalculator.Cqrs.Contracts
@using TaxCalculator.WebFrontend.Pages.Incomes.Query

@inject IQueryBus _queryBus
@inject ICommandBus _commandBus
@inject NavigationManager _navigationManager

<PageTitle>Edit Income</PageTitle>

@if (string.IsNullOrEmpty(UpdateIncomeModel.IncomeId))
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div>
            <h3>Edit income</h3>
        </div>
        <br />
        <div>
            <EditForm OnSubmit="@HandleSubmitAsync" EditContext="@EditContext">
                <Validator TModel="UpdateIncomeModel" OnValidated="@(() => this.StateHasChanged())" />
            
                <TextInput Label="Amount"
                           MessageFor="@(() => UpdateIncomeModel.Value)"
                           @bind-Value="@UpdateIncomeModel.Value" />
            
                <TextInput Label="Income date" 
                           MessageFor="@(() => UpdateIncomeModel.IncomeDate)"
                           @bind-Value="@UpdateIncomeModel.IncomeDate"/>
            
                <ButtonSubmit IsEnabled="@IsValid" />
            </EditForm>
        </div>
    </div> 
}

@code {
    [Parameter]
    public string ProfileId { get; set; }
    
    [Parameter]
    public string IncomeId { get; set; }
    
    private bool IsValid => !EditContext.GetValidationMessages().Any();
    
    private UpdateIncomeModel UpdateIncomeModel { get; } = new();
    
    private EditContext EditContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var income = await _queryBus.ExecuteAsync<GetIncomeByIdQuery, IncomeModel>(new GetIncomeByIdQuery
        {
            IncomeId = Guid.Parse(IncomeId)
        });

        UpdateIncomeModel.Value = income.Value.ToString();
        UpdateIncomeModel.IncomeDate = income.IncomeDate.ToString("yyyy-MM-dd");
        UpdateIncomeModel.IncomeId = IncomeId;
        
        EditContext = new EditContext(UpdateIncomeModel);
    }

    private async Task HandleSubmitAsync()
    {
        var result = await _commandBus.DispatchAsync(new UpdateIncomeCommand
        {
            IncomeId = Guid.Parse(UpdateIncomeModel.IncomeId),
            Value = decimal.Parse(UpdateIncomeModel.Value),
            IncomeDate = DateTime.Parse(UpdateIncomeModel.IncomeDate)
        });
        
        if (result.Status == CommandStatus.Success)
        {
            _navigationManager.NavigateTo($"/manage-incomes/{ProfileId}");
        }
    }
}