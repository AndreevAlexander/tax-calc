@page "/manage-incomes/{ProfileId}"

@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Pages.Incomes.Commands
@using TaxCalculator.WebFrontend.Pages.Incomes.Query
@using TaxCalculator.Cqrs.Contracts

@inject IQueryBus _queryBus
@inject ICommandBus _commandBus

<PageTitle>Manage Incomes</PageTitle>

@if (!Incomes.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div style="display: flex; justify-content: space-between">
            <h3>Manage incomes</h3>
            <NavLink href="@("/manage-incomes/" + ProfileId + "/add")" class="btn btn-primary">Add income</NavLink>
        </div>
        <br />
        <div>
            <table class="table" style="width: 100%">
                <thead>
                <tr>
                    <th>Amount</th>
                    <th>Income Date</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                    @foreach (var income in Incomes)
                    {
                        <tr>
                            <td>@income.Value</td>
                            <td>@income.IncomeDate.ToString("yyyy-MM-dd")</td>
                            <td style="box-sizing: border-box">
                                <NavLink href="@("/manage-incomes/" + ProfileId + "/edit/" + income.Id)" class="btn btn-warning">Edit</NavLink>
                                <button class="btn btn-danger" onclick="@(() => HandleDeleteAsync(income.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProfileId { get; set; }

    private List<IncomeModel> Incomes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var incomes = await _queryBus.ExecuteAsync<GetIncomesQuery, List<IncomeModel>>(new GetIncomesQuery
        {
            TaxProfileId = Guid.Parse(ProfileId)
        });
        
        Incomes.AddRange(incomes);
    }

    private async Task HandleDeleteAsync(Guid incomeId)
    {
        var result = await _commandBus.DispatchAsync(new RemoveIncomeCommand
        {
            IncomeId = incomeId
        });
        
        if (result.Status == CommandStatus.Success)
        {
            Incomes = Incomes.Where(x => x.Id != incomeId).ToList();
            StateHasChanged();
        }
    }
}