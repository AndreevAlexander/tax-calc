@page "/tax-profile/details/{ProfileId}"

@using TaxCalculator.Domain.Services.Identifier
@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Pages.Taxes
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.TaxProfiles.Commands
@using TaxCalculator.Cqrs.Contracts
@using TaxCalculator.WebFrontend.Pages.TaxProfiles.Queries
@using TaxCalculator.Contracts

@inject ICommandBus _commandBus;
@inject IQueryBus _queryBus;
@inject NavigationManager _navigationManager;
@inject IIdentifierService _identifierService;
@inject IJSRuntime _jsRuntime;
@inject IMapper _mapper;

@inherits StateComponent

<PageTitle>Tax Profile Details</PageTitle>

@if (!IsLoaded)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div class="app-table-header">
            <h3>View profile details</h3>
            <div class="app-table-actions">
                <NavLink href="@("manage-incomes/" + ProfileId)" class="btn btn-primary">Manage incomes</NavLink>
                <NavLink href="@("/manage-additional-spends/" + ProfileId)" class="btn btn-primary">Manage additional spends</NavLink>
            </div>
        </div>
        <br/>
        <div>
            <div>
                <EditForm EditContext="@EditContext" OnSubmit="@HandleProfileUpdate">
                    <Validator TModel="TaxProfileModel" OnValidated="@(() => this.StateHasChanged())"/>
                    
                    <TextInput Label="Name" 
                               MessageFor="@(() => TaxProfileModel.Name)"
                               @bind-Value="TaxProfileModel.Name" />

                    <TextAreaInput Label="Description"
                                   MessageFor="@(() => TaxProfileModel.Description)"
                                   @bind-Value="TaxProfileModel.Description" />

                    <SelectInput Label="Profile currency" 
                                 DefaultOption="Select currency"
                                 Data="Currencies"
                                 @bind-Value="CurrencyId"
                                 IsEnabled="false"/>

                    <ButtonSubmit IsEnabled="@IsValid"/>
                </EditForm>
            </div>
            <TaxGrid ProfileId="@ProfileId" />
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProfileId { get; set; }
    
    private TaxProfileModel? TaxProfileModel { get; set; }
    
    private Dictionary<Guid, string>? Currencies { get; set; } = new();
    
    private Guid CurrencyId { get; set; }
    
    private bool IsLoaded { get; set; }

    private bool IsValid => !EditContext.GetValidationMessages().Any();
    
    private EditContext EditContext { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        TaxProfileModel = await _queryBus.ExecuteAsync<GetTaxProfileByIdQuery, TaxProfileModel>(new GetTaxProfileByIdQuery
        {
            TaxProfileId = Guid.Parse(ProfileId)
        });

        if (TaxProfileModel != null)
        {
            Currencies = _identifierService.Currencies.IdentifierValues;
            CurrencyId = TaxProfileModel.ProfileCurrencyId.Value;
        }

        RaiseStateChanged(StateEventList.CurrentProfileChanged, TaxProfileModel);
        
        EditContext = new EditContext(TaxProfileModel);
        IsLoaded = true;
    }

    private async Task HandleProfileUpdate()
    {
        var command = _mapper.Map<UpdateTaxProfileCommand>(TaxProfileModel);
        
        var result = await _commandBus.DispatchAsync(command);
        
        if (result.Status == CommandStatus.Success)
        {
            await _jsRuntime.InvokeVoidAsync("alert", "Profile updated");
        }
    }
}