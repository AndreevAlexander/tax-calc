@page "/tax-profile/create"

@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.Domain.Services.Identifier
@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.TaxProfiles.Commands
@using TaxCalculator.Cqrs.Contracts
@using TaxCalculator.Contracts

@inject ICommandBus _commandBus;
@inject NavigationManager _navigationManager;
@inject IIdentifierService _identifierService;
@inject IMapper _mapper;

<PageTitle>Create Tax Profile</PageTitle>

@if (!IsInitialized)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div>
            <h3>Create new profile</h3>
        </div>
        <br />
        <div>
            <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmitAsync">
                <Validator TModel="CreateTaxProfileModel" OnValidated="@(() => this.StateHasChanged())" />
            
                <TextInput Label="Name"
                           @bind-Value="CreateTaxProfileModel.Name"
                           MessageFor="@(() => CreateTaxProfileModel.Name)"/>

                <TextAreaInput Label="Description"
                               @bind-Value="CreateTaxProfileModel.Description"
                               MessageFor="@(() => CreateTaxProfileModel.Description)"/>

                <SelectInput Label="Profile currency"
                             DefaultOption="Select currency"
                             Data="Currencies"
                             @bind-Value="CreateTaxProfileModel.ProfileCurrencyId"/>
                
                <ButtonSubmit IsEnabled="@(CanExecute && IsValid)" />
            </EditForm>
        </div>
    </div>
}

@code {
    private CreateTaxProfileModel CreateTaxProfileModel { get; } = new();
    
    private EditContext EditContext { get; set; }

    private Dictionary<string, string>? Currencies { get; set; }

    private bool IsInitialized { get; set; }

    private bool IsValid => !EditContext.GetValidationMessages().Any();

    private bool CanExecute => !string.IsNullOrEmpty(CreateTaxProfileModel.ProfileCurrencyId);

    protected override void OnInitialized()
    {
        Currencies = _identifierService.Currencies.ToDictionary().ToDictionary(x => x.Key.ToString(), x => x.Value);
        EditContext = new EditContext(CreateTaxProfileModel);

        IsInitialized = true;
    }
    
    private async Task HandleSubmitAsync()
    {
        var command = _mapper.Map<CreateTaxProfileCommand>(CreateTaxProfileModel);
        
        var result = await _commandBus.DispatchAsync(command);
        
        if (result.Status == CommandStatus.Success)
        {
            _navigationManager.NavigateTo($"tax-profile/details/{result.RecordId}");
        }
    }
}