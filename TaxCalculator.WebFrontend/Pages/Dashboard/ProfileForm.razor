@using TaxCalculator.WebFrontend.Validation;
@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.WebFrontend.Data
@using TaxCalculator.Domain.Entities

@inject WebApi _webApi;

@if (Initializing)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmitAsync">
        <Validator TModel="TaxProfileDropdown" OnValidated="@(() => this.StateHasChanged())"/>
        
        <SelectInput DefaultOption="Select tax profile"
                     Data="TaxProfiles"
                     @bind-Value="@TaxProfileDropdown.Id"
                     MessageFor="@(() => TaxProfileDropdown.Id)"/>

        <ButtonSubmit IsEnabled="@(CanExecute && IsValid)" Label="Select"/>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<Guid?> OnSubmit { get; set; }
    
    private EditContext EditContext { get; set; }

    private bool CanExecute => !string.IsNullOrEmpty(TaxProfileDropdown.Id);

    private bool IsValid => !EditContext.GetValidationMessages().Any();

    private TaxProfileDropdown TaxProfileDropdown { get; set; } = new();
    
    private Dictionary<string, string>? TaxProfiles { get; set; }

    private bool Initializing { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        TaxProfiles = (await _webApi.GetManyAsync<TaxProfile>("TaxProfile"))
            .ToDictionary(x => x.Id.ToString(), x => x.Name);

        EditContext = new EditContext(TaxProfileDropdown);
        
        Initializing = false;
    }

    private async Task HandleSubmitAsync()
    {
        if (IsValid && OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Guid.Parse(TaxProfileDropdown.Id));
        }
    }
}