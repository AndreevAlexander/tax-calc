@page "/manage-additional-spends/{ProfileId}/edit/{AdditionalSpendId}"

@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.Domain.Entities
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.AdditionalSpends.Commands
@using TaxCalculator.WebFrontend.Pages.AdditionalSpends.Queries
@using TaxCalculator.Cqrs.Contracts

@inject IQueryBus _queryBus
@inject ICommandBus _commandBus
@inject NavigationManager _navigationManager

<PageTitle>Edit Additional Spend</PageTitle>

@if (!IsLoaded)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div>
            <h3>Edit additional spend</h3>
        </div>
        <br />
        <div>
            <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmitAsync">
                <Validator TModel="UpdateAdditionalSpendModel" OnValidated="@(() => this.StateHasChanged())" />
            
                <TextInput Label="Amount" 
                           @bind-Value="@UpdateAdditionalSpendModel.Amount"
                           MessageFor="@(() => UpdateAdditionalSpendModel.Amount)"/>
            
                <CheckBoxInput Label="Applied Before Taxation"
                               @bind-Value="@UpdateAdditionalSpendModel.AppliedBeforeTax"/>
            
                <ButtonSubmit IsEnabled="@IsValid"/>
            </EditForm>        
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProfileId { get; set; }
    
    [Parameter]
    public string AdditionalSpendId { get; set; }
    
    private EditContext EditContext { get; set; }

    private UpdateAdditionalSpendModel UpdateAdditionalSpendModel { get; } = new();

    private bool IsValid => !EditContext.GetValidationMessages().Any();

    private bool IsLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var additionalSpend = await _queryBus.ExecuteAsync<GetAdditionalSpendByIdQuery, AdditionalSpendModel>(new GetAdditionalSpendByIdQuery
        {
            AdditionalSpendId = Guid.Parse(AdditionalSpendId)
        });

        if (additionalSpend != null)
        {
            UpdateAdditionalSpendModel.Amount = additionalSpend.Amount.ToString();
            UpdateAdditionalSpendModel.AppliedBeforeTax = additionalSpend.AppliedBeforeTax;
            UpdateAdditionalSpendModel.AdditionalSpendId = AdditionalSpendId;
        }
        
        EditContext = new EditContext(UpdateAdditionalSpendModel);
        IsLoaded = true;
    }

    private async Task HandleSubmitAsync()
    {
        var result = await _commandBus.DispatchAsync(new UpdateAdditionalSpendCommand
        {
            Amount = decimal.Parse(UpdateAdditionalSpendModel.Amount),
            AdditionalSpendId = Guid.Parse(UpdateAdditionalSpendModel.AdditionalSpendId),
            AppliedBeforeTax = UpdateAdditionalSpendModel.AppliedBeforeTax
        });

        if (result.Status == CommandStatus.Success)
        {
            _navigationManager.NavigateTo($"/manage-additional-spends/{ProfileId}");
        }
    }
}