@page "/manage-additional-spends/{ProfileId}"

@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Pages.AdditionalSpends.Commands
@using TaxCalculator.WebFrontend.Pages.AdditionalSpends.Queries
@using TaxCalculator.Cqrs.Contracts

@inject IQueryBus _queryBus
@inject ICommandBus _commandBus

<PageTitle>Manage Additional Spends</PageTitle>

@if (AdditionalSpends == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div class="app-table-header">
            <h3>Manage additional spends</h3>
            <NavLink href="@("/manage-additional-spends/" + ProfileId + "/add")" class="btn btn-primary">Add</NavLink>
        </div>
        <br/>
        <div>
            <table class="table app-table-max-width">
                <thead>
                <tr>
                    <th>Amount</th>
                    <th>Applied Before Taxation</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                    @foreach (var additionalSpend in AdditionalSpends)
                    {
                        <tr>
                            <td>@additionalSpend.Amount</td>
                            <td>@(additionalSpend.AppliedBeforeTax ? "Yes" : "No")</td>
                            <td class="app-table-actions">
                                <NavLink href="@("/manage-additional-spends/" + ProfileId + "/edit/" + additionalSpend.Id)"
                                         class="btn btn-warning">
                                    Edit
                                </NavLink>
                                <button class="btn btn-danger"
                                        onclick="@(() => HandleDeleteAsync(additionalSpend.Id))">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProfileId { get; set; }
    
    private List<AdditionalSpendModel>? AdditionalSpends { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AdditionalSpends = await _queryBus.ExecuteAsync<GetAdditionalSpendsQuery, List<AdditionalSpendModel>>(new GetAdditionalSpendsQuery
        {
            TaxProfileId = Guid.Parse(ProfileId)
        });
    }

    private async Task HandleDeleteAsync(Guid id)
    {
        var result = await _commandBus.DispatchAsync(new RemoveAdditionalSpendCommand
        {
            AdditionalSpendId = id
        });
        
        if (result.Status == CommandStatus.Success)
        {
            AdditionalSpends = AdditionalSpends?.Where(x => x.Id != id).ToList();
            StateHasChanged();
        }
    }
}