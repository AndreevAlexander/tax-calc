@page "/tax/edit/{ProfileId}/{TaxId}"

@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.Domain.Enums
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.Taxes.Commands
@using TaxCalculator.WebFrontend.Pages.Taxes.Queries
@using TaxCalculator.Cqrs.Contracts
@using TaxCalculator.Contracts

@inject IQueryBus _queryBus
@inject ICommandBus _commandBus
@inject NavigationManager _navigationManager
@inject IMapper _mapper

<PageTitle>Edit Tax Configuration</PageTitle>

@if (!IsInitialized)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div>
            <h3>Edit tax configuration</h3>
        </div>
        <br/> 
        <div>
            <EditForm OnSubmit="@HandleSubmitAsync" EditContext="@EditContext">
                <Validator TModel="TaxModel" OnValidated="@(() => this.StateHasChanged())" />
                
                <NumericInput Label="Amount" 
                           @bind-Value="TaxModel.Amount"
                           MessageFor="@(() => TaxModel.Amount)"/>

                <NumericInput Label="Applies before"
                           @bind-Value="TaxModel.AppliesBefore" />
                
                <CheckBoxInput Label="Is Percentage" 
                               @bind-Value="TaxModel.IsPercentage" />
                
                <SelectInput Label="Tax type"
                             DefaultOption="Select tax type"
                             Data="@TaxTypes"
                             @bind-Value="@TaxModel.TaxType"
                             MessageFor="@(() => TaxModel.TaxType)" />

                <ButtonSubmit IsEnabled="@(CanExecute && IsValid)"/>
            </EditForm>  
        </div>
    </div>
}

@code {

    [Parameter]
    public string ProfileId { get; set; }
    
    [Parameter]
    public string TaxId { get; set; }

    private TaxModel TaxModel { get; set; }

    private Dictionary<TaxType, string>? TaxTypes { get; set; }

    private EditContext EditContext { get; set; }

    private bool IsValid => !EditContext.GetValidationMessages().Any();

    private bool CanExecute => true;//!string.IsNullOrEmpty(TaxModel.TaxType);

    private bool IsInitialized { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        TaxModel = await _queryBus.ExecuteAsync<GetTaxByIdQuery, TaxModel>(new GetTaxByIdQuery
        {
            TaxId = Guid.Parse(TaxId)
        });

        EditContext = new EditContext(TaxModel);
        
        TaxTypes = new Dictionary<TaxType, string>
        {
            {TaxType.IncomeTax, "Income tax"},
            {TaxType.SocialTax, "Social tax"}
        };

        IsInitialized = true;
    }

    private async Task HandleSubmitAsync()
    {
        if (IsValid)
        {
            var command = _mapper.Map<UpdateTaxCommand>(TaxModel);
            
            var result = await _commandBus.DispatchAsync(command);
            
            if (result.Status == CommandStatus.Success)
            {
                _navigationManager.NavigateTo($"tax-profile/details/{ProfileId}");
            }
        }
    }
}