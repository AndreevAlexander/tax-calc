@using TaxCalculator.Domain.Entities
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Pages.Taxes.Commands
@using TaxCalculator.WebFrontend.Pages.Taxes.Queries
@using TaxCalculator.Cqrs.Contracts

@inject IQueryBus _queryBus
@inject ICommandBus _commandBus

<div class="app-component-mtop-20">
    <div class="app-table-header">
        <h5>Taxes configurations</h5>
        <NavLink href="@("tax/create/" + ProfileId)" class="btn btn-primary">Add tax configuration</NavLink>
    </div>
    <div>
        <table class="table app-table-max-width">
            <thead>
            <tr>
                <th>Amount</th>
                <th>Tax Type</th>
                <th>Applies Before</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var tax in Taxes)
            {
                <tr>
                    <td>@tax.Amount @(tax.IsPercentage ? "%" : "")</td>
                    <td>@tax.TaxType</td>
                    <td>@tax.AppliesBefore</td>
                    <td class="app-table-actions">
                        <NavLink class="btn btn-warning" href="@("tax/edit/" + ProfileId + "/" + tax.Id)">Edit</NavLink>
                        <button class="btn btn-danger" onclick="@(() => HandleTaxDeleteAsync(tax.Id))">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string ProfileId { get; set; }

    private List<TaxModel> Taxes { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        var taxes = await _queryBus.ExecuteAsync<GetTaxesQuery, List<TaxModel>>(new GetTaxesQuery
        {
            ProfileId = Guid.Parse(ProfileId)
        });
        
        Taxes.AddRange(taxes);
    }
    
    private async Task HandleTaxDeleteAsync(Guid id)
    {
        var result = await _commandBus.DispatchAsync(new RemoveTaxCommand
        {
            TaxId = id
        });
        
        if (result.Status == CommandStatus.Success)
        {
            Taxes = Taxes.Where(x => x.Id != id).ToList();
            StateHasChanged();
        }
    }
}