@page "/tax/create/{ProfileId}"

@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.Domain.Enums
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.Taxes.Commands
@using TaxCalculator.Cqrs.Contracts

@inject ICommandBus _commandBus
@inject NavigationManager _navigationManager

<PageTitle>Create Tax Configuration</PageTitle>

@if (Initializing)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div>
            <h3>Create tax configuration</h3>
        </div>
        <br />
        <div>
            <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmitAsync">
                <Validator TModel="CreateTaxModel" OnValidated="@(() => this.StateHasChanged())" />
                <TextInput Label="Amount" @bind-Value="CreateTaxModel.Amount" MessageFor="@(() => CreateTaxModel.Amount)"/>
                <TextInput Label="Applies before" @bind-Value="CreateTaxModel.AppliesBefore"  />
                <CheckBoxInput Label="Is Percentage" @bind-Value="CreateTaxModel.IsPercentage" />
                <SelectInput Label="Tax type" DefaultOption="Select tax type" Data="@TaxTypes" @bind-Value="CreateTaxModel.TaxType" />
                <ButtonSubmit IsEnabled="@(CanExecute && IsValid)" />
            </EditForm>  
        </div>
    </div>
}

@code {

    [Parameter]
    public string ProfileId { get; set; }

    private CreateTaxModel CreateTaxModel { get; } = new();

    private Dictionary<string, string> TaxTypes { get; set; }
    
    private EditContext EditContext { get; set; }
    
    private bool IsValid => !EditContext.GetValidationMessages().Any();

    private bool CanExecute => !string.IsNullOrEmpty(CreateTaxModel.TaxType);

    private bool Initializing { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        CreateTaxModel.TaxProfileId = Guid.Parse(ProfileId);

        TaxTypes = new Dictionary<string, string>
        {
            {nameof(TaxType.IncomeTax), "Income tax"},
            {nameof(TaxType.SocialTax), "Social tax"}
        };

        EditContext = new EditContext(CreateTaxModel);
        Initializing = false;
    }

    private async Task HandleSubmitAsync()
    {
        Enum.TryParse(CreateTaxModel.TaxType, false, out TaxType type);
        var result = await _commandBus.DispatchAsync(new CreateTaxCommand
        {
            Amount = double.Parse(CreateTaxModel.Amount),
            AppliesBefore = CreateTaxModel.AppliesBefore != null ? decimal.Parse(CreateTaxModel.AppliesBefore) : null,
            IsPercentage = CreateTaxModel.IsPercentage,
            TaxProfileId = CreateTaxModel.TaxProfileId,
            TaxType = type
        });
        
        if (result.Status == CommandStatus.Success)
        {
            _navigationManager.NavigateTo($"tax-profile/details/{ProfileId}");
        }
    }
}