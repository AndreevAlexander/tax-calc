@page "/tax/create/{ProfileId}"

@using TaxCalculator.WebFrontend.Models
@using TaxCalculator.WebFrontend.Shared.FormInputs
@using TaxCalculator.WebFrontend.Validation
@using TaxCalculator.Domain.Enums
@using TaxCalculator.Cqrs.Contracts.Bus
@using TaxCalculator.WebFrontend.Pages.Taxes.Commands
@using TaxCalculator.Cqrs.Contracts
@using TaxCalculator.Contracts

@inject ICommandBus _commandBus
@inject NavigationManager _navigationManager
@inject IMapper _mapper

<PageTitle>Create Tax Configuration</PageTitle>

@if (Initializing)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <div>
            <h3>Create tax configuration</h3>
        </div>
        <br />
        <div>
            <EditForm EditContext="@EditContext" OnSubmit="@HandleSubmitAsync">
                <Validator TModel="TaxModel" OnValidated="@(() => this.StateHasChanged())" />
                <NumericInput Label="Amount" @bind-Value="TaxModel.Amount" MessageFor="@(() => TaxModel.Amount)"/>
                <NumericInput Label="Applies before" @bind-Value="TaxModel.AppliesBefore" />
                <CheckBoxInput Label="Is Percentage" @bind-Value="TaxModel.IsPercentage" />
                <SelectInput Label="Tax type" DefaultOption="Select tax type" Data="@TaxTypes" @bind-Value="TaxModel.TaxType" />
                <ButtonSubmit IsEnabled="@(CanExecute && IsValid)" />
            </EditForm>  
        </div>
    </div>
}

@code {

    [Parameter]
    public string ProfileId { get; set; }

    private TaxModel TaxModel { get; } = new();

    private Dictionary<TaxType, string> TaxTypes { get; set; }
    
    private EditContext EditContext { get; set; }
    
    private bool IsValid => !EditContext.GetValidationMessages().Any();

    private bool CanExecute => true;//!string.IsNullOrEmpty(CreateTaxModel.TaxType);

    private bool Initializing { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        TaxModel.TaxProfileId = Guid.Parse(ProfileId);

        TaxTypes = new Dictionary<TaxType, string>
        {
            {TaxType.IncomeTax, "Income tax"},
            {TaxType.SocialTax, "Social tax"}
        };

        EditContext = new EditContext(TaxModel);
        Initializing = false;
    }

    private async Task HandleSubmitAsync()
    {
        var command = _mapper.Map<CreateTaxCommand>(TaxModel);
        
        var result = await _commandBus.DispatchAsync(command);
        
        if (result.Status == CommandStatus.Success)
        {
            _navigationManager.NavigateTo($"tax-profile/details/{ProfileId}");
        }
    }
}